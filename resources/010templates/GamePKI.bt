//------------------------------------------------
//--- 010 Editor v11.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

LittleEndian();

struct Header {
    uint32 index_version;
    GUID guid <fgcolor=cLtBlue>;
    uint32 entry_count;
    uint32 metadata_ptr;
    uint32 unk6_06BDFB;
    uint32 string_data_ptr;
} header;

typedef struct MetadataEntry {
    uint32 str <bgcolor=cLtRed,read=ReadOffsetString>;
    uint16 some_flag <bgcolor=cLtBlue>; //0x40 or
    uint16 unk1 <bgcolor=cLtYellow>;
    uint32 unk_2;
    uint32 unk_3;
    uint32 unk_4;
    uint16 compressed_header_len <format=hex>;
    uint16 file_offset <read=ReadFileOffset>;
    uint32 unk_6;
    uint32 unk_7;
    uint32 unk_8;
    uint32 compressed_data_len <format=hex>;
};

local int i;

for (i = 0; i < header.entry_count; i++)
{    
    MetadataEntry entry <bgcolor=cLtGreen, read=ReadMetadataEntry>;
}

struct StringHeader {
    uint32 unk[9];
} stringHeader;

string ReadOffsetString(uint32 ptr){
    local int baseOffset = header.entry_count * sizeof(MetadataEntry) + sizeof(Header);

    return ReadString(baseOffset + ptr);
}

string ReadMetadataEntry(MetadataEntry &entry) {
    local string str;

    SPrintf(str, "PkgLen: 0x%x", entry.file_length_1 + entry.file_length_0);

    return str;
}

string ReadFileOffset(uint16 offset){
    local uint32 final = (uint32)offset << 16;
    local string str;

    SPrintf(str, "%x", final);

    return str;
}
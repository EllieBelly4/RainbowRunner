package main

import "text/template"

var templateFuncMap = template.FuncMap{
	"add":                        Add,
	"isNumberType":               IsNumberType,
	"isStringType":               IsStringType,
	"generateCallString":         GenerateCallString,
	"generateCallMemberFunction": GenerateCallMemberFunction,
}

const (
	// language=gotemplate
	templateString string = `package objects

/**
 * This file is generated by scripts/generatelua/generatelua.go
 * DO NOT EDIT
 */

import (
	lua2 "github.com/yuin/gopher-lua"
	lua "RainbowRunner/internal/lua"
	{{- range .Imports }}
	{{ .ImportString }}
	{{- end }}
)

func registerLua{{ .Struct.Name }}(state *lua2.LState) {
	// Ensure the import is referenced in code
	_ = lua.LuaScript{}

	mt := state.NewTypeMetatable("{{ .Struct.Name }}")
	state.SetGlobal("{{ .Struct.Name }}", mt)
{{- if .Struct.Constructor }}
	state.SetField(mt, "new", state.NewFunction(newLua{{ .Struct.Name }}))
{{- end }}
	state.SetField(mt, "__index", state.SetFuncs(state.NewTable(),
		luaMethods{{ .Struct.Name }}(),
	))
}

func luaMethods{{ .Struct.Name }}() map[string]lua2.LGFunction {
	return luaMethodsExtend(map[string]lua2.LGFunction{
{{- if .Struct.Fields }}
	{{- $struct := .Struct }}
	{{- range $i, $field := .Struct.Fields }}
		{{- if not $field.IsExported }}
		{{- continue }}
		{{- end }}

		{{- if isStringType $field }}
		"{{ $field.NameCamelcase }}": luaGenericGetSetString[{{ $struct.FullTypeString }}](func(v {{ $struct.FullTypeString }}) *string { return &v.{{ $field.Name }} }),
		{{- else if isNumberType $field }}
		"{{ $field.NameCamelcase }}": luaGenericGetSetNumber[{{ $struct.FullTypeString }}, {{ $field.FullTypeString }}](func(v {{ $struct.FullTypeString }}) *{{ $field.FullTypeString }} { return &v.{{ $field.Name }} }),
		{{- end }}
	{{- end }}
{{- end -}}

{{- $struct := .Struct }}
{{- range $i, $method := .Struct.Methods }}
		{{- if not $method.IsExported }}
		{{- continue }}
		{{- end }}
		"{{ $method.NameCamelcase }}": {{ generateCallMemberFunction $struct $method }},
{{- end }}
	}, {{ .ExtendsString }})
}

{{- if .Struct.Constructor }}
func newLua{{ .Struct.Name }}(l *lua2.LState) int {
    obj := {{ generateCallString .Struct.Constructor }}
	ud := l.NewUserData()
	ud.Value = obj

	l.SetMetatable(ud, l.GetTypeMetatable("{{ .Struct.Name }}"))
	l.Push(ud)
	return 1
}
{{- end }}
`
)

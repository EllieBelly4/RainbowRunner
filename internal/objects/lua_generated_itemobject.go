// Code generated by scripts/generatelua DO NOT EDIT.
package objects

import (
	lua "RainbowRunner/internal/lua"
	"RainbowRunner/pkg/byter"
	lua2 "github.com/yuin/gopher-lua"
)

type IItemObject interface {
	GetItemObject() *ItemObject
}

func (i *ItemObject) GetItemObject() *ItemObject {
	return i
}

func registerLuaItemObject(state *lua2.LState) {
	// Ensure the import is referenced in code
	_ = lua.LuaScript{}

	mt := state.NewTypeMetatable("ItemObject")
	state.SetGlobal("ItemObject", mt)
	state.SetField(mt, "new", state.NewFunction(newLuaItemObject))
	state.SetField(mt, "__index", state.SetFuncs(state.NewTable(),
		luaMethodsItemObject(),
	))
}

func luaMethodsItemObject() map[string]lua2.LGFunction {
	return luaMethodsExtend(map[string]lua2.LGFunction{
		"type": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IItemObject](l, 1)
			obj := objInterface.GetItemObject()
			res0 := obj.Type()
			ud := l.NewUserData()
			ud.Value = res0
			l.SetMetatable(ud, l.GetTypeMetatable("DRObjectType"))
			l.Push(ud)

			return 1
		},
		"writeInit": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IItemObject](l, 1)
			obj := objInterface.GetItemObject()
			obj.WriteInit(
				lua.CheckReferenceValue[byter.Byter](l, 2),
			)

			return 0
		},
		"getItemObject": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IItemObject](l, 1)
			obj := objInterface.GetItemObject()
			res0 := obj.GetItemObject()
			ud := l.NewUserData()
			ud.Value = res0
			l.SetMetatable(ud, l.GetTypeMetatable("ItemObject"))
			l.Push(ud)

			return 1
		},
	}, luaMethodsWorldEntity)
}
func newLuaItemObject(l *lua2.LState) int {
	obj := NewItemObject(string(l.CheckString(1)),
		lua.CheckValue[DRObject](l, 2),
	)
	ud := l.NewUserData()
	ud.Value = obj

	l.SetMetatable(ud, l.GetTypeMetatable("ItemObject"))
	l.Push(ud)
	return 1
}

func (i *ItemObject) ToLua(l *lua2.LState) lua2.LValue {
	ud := l.NewUserData()
	ud.Value = i

	l.SetMetatable(ud, l.GetTypeMetatable("ItemObject"))
	return ud
}

// Code generated by scripts/generatelua DO NOT EDIT.
package objects

import (
	"RainbowRunner/internal/connections"
	lua "RainbowRunner/internal/lua"
	"RainbowRunner/internal/message"
	lua2 "github.com/yuin/gopher-lua"
)

type IRRPlayer interface {
	GetRRPlayer() *RRPlayer
}

func (r *RRPlayer) GetRRPlayer() *RRPlayer {
	return r
}

func registerLuaRRPlayer(state *lua2.LState) {
	// Ensure the import is referenced in code
	_ = lua.LuaScript{}

	mt := state.NewTypeMetatable("RRPlayer")
	state.SetGlobal("RRPlayer", mt)
	state.SetField(mt, "new", state.NewFunction(newLuaRRPlayer))
	state.SetField(mt, "__index", state.SetFuncs(state.NewTable(),
		luaMethodsRRPlayer(),
	))
}

func luaMethodsRRPlayer() map[string]lua2.LGFunction {
	return lua.LuaMethodsExtend(map[string]lua2.LGFunction{
		"conn":               lua.LuaGenericGetSetValueAny[IRRPlayer](func(v IRRPlayer) **connections.RRConn { return &v.GetRRPlayer().Conn }),
		"currentCharacter":   lua.LuaGenericGetSetValueAny[IRRPlayer](func(v IRRPlayer) **Player { return &v.GetRRPlayer().CurrentCharacter }),
		"characters":         lua.LuaGenericGetSetValueAny[IRRPlayer](func(v IRRPlayer) *[]*Player { return &v.GetRRPlayer().Characters }),
		"clientEntityWriter": lua.LuaGenericGetSetValueAny[IRRPlayer](func(v IRRPlayer) **ClientEntityWriter { return &v.GetRRPlayer().ClientEntityWriter }),
		"messageQueue":       lua.LuaGenericGetSetValueAny[IRRPlayer](func(v IRRPlayer) **message.Queue { return &v.GetRRPlayer().MessageQueue }),

		"getRRPlayer": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IRRPlayer](l, 1)
			obj := objInterface.GetRRPlayer()
			res0 := obj.GetRRPlayer()
			if res0 != nil {
				l.Push(res0.ToLua(l))
			} else {
				l.Push(lua2.LNil)
			}

			return 1
		},

		"setDebugSendMovementMessages": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IRRPlayer](l, 1)
			obj := objInterface.GetRRPlayer()
			obj.SetDebugSendMovementMessages(bool(l.CheckBool(2)))

			return 0
		},

		"getDebugSendMovementMessages": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IRRPlayer](l, 1)
			obj := objInterface.GetRRPlayer()
			res0 := obj.GetDebugSendMovementMessages()
			l.Push(lua2.LBool(res0))

			return 1
		},

		"debugOptions": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IRRPlayer](l, 1)
			obj := objInterface.GetRRPlayer()
			res0 := obj.DebugOptions()
			if res0 != nil {
				l.Push(res0.ToLua(l))
			} else {
				l.Push(lua2.LNil)
			}

			return 1
		},

		"zone": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IRRPlayer](l, 1)
			obj := objInterface.GetRRPlayer()
			res0 := obj.Zone()
			if res0 != nil {
				l.Push(res0.ToLua(l))
			} else {
				l.Push(lua2.LNil)
			}

			return 1
		},
	})
}
func newLuaRRPlayer(l *lua2.LState) int {
	obj := NewRRPlayer(
		lua.CheckReferenceValue[connections.RRConn](l, 1),
		lua.CheckReferenceValue[ClientEntityWriter](l, 2),
		lua.CheckReferenceValue[message.Queue](l, 3),
	)
	ud := l.NewUserData()
	ud.Value = obj

	l.SetMetatable(ud, l.GetTypeMetatable("RRPlayer"))
	l.Push(ud)
	return 1
}

func (r *RRPlayer) ToLua(l *lua2.LState) lua2.LValue {
	ud := l.NewUserData()
	ud.Value = r

	l.SetMetatable(ud, l.GetTypeMetatable("RRPlayer"))
	return ud
}

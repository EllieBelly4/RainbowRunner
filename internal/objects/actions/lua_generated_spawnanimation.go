// Code generated by scripts/generatelua DO NOT EDIT.
package actions

import (
	lua "RainbowRunner/internal/lua"
	byter "RainbowRunner/pkg/byter"
	lua2 "github.com/yuin/gopher-lua"
)

type ISpawnAnimation interface {
	GetSpawnAnimation() *SpawnAnimation
}

func (s *SpawnAnimation) GetSpawnAnimation() *SpawnAnimation {
	return s
}

func registerLuaSpawnAnimation(state *lua2.LState) {
	// Ensure the import is referenced in code
	_ = lua.LuaScript{}

	mt := state.NewTypeMetatable("SpawnAnimation")
	state.SetGlobal("SpawnAnimation", mt)
	state.SetField(mt, "__index", state.SetFuncs(state.NewTable(),
		luaMethodsSpawnAnimation(),
	))
}

func luaMethodsSpawnAnimation() map[string]lua2.LGFunction {
	return lua.LuaMethodsExtend(map[string]lua2.LGFunction{
		"opCode": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[ISpawnAnimation](l, 1)
			obj := objInterface.GetSpawnAnimation()
			res0 := obj.OpCode()
			ud := l.NewUserData()
			ud.Value = res0
			l.SetMetatable(ud, l.GetTypeMetatable("BehaviourAction"))
			l.Push(ud)

			return 1
		},
		"init": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[ISpawnAnimation](l, 1)
			obj := objInterface.GetSpawnAnimation()
			obj.Init(
				lua.CheckReferenceValue[byter.Byter](l, 2),
			)

			return 0
		},
	})
}

func (s *SpawnAnimation) ToLua(l *lua2.LState) lua2.LValue {
	ud := l.NewUserData()
	ud.Value = s

	l.SetMetatable(ud, l.GetTypeMetatable("SpawnAnimation"))
	return ud
}

package objects

/**
 * This file is generated by scripts/generatelua/generatelua.go
 * DO NOT EDIT
 */

import (
	lua "RainbowRunner/internal/lua"
	"RainbowRunner/pkg/byter"
	"RainbowRunner/pkg/datatypes"
	lua2 "github.com/yuin/gopher-lua"
)

func registerLuaZone(state *lua2.LState) {
	// Ensure the import is referenced in code
	_ = lua.LuaScript{}

	mt := state.NewTypeMetatable("Zone")
	state.SetGlobal("Zone", mt)
	state.SetField(mt, "new", state.NewFunction(newLuaZone))
	state.SetField(mt, "__index", state.SetFuncs(state.NewTable(),
		luaMethodsZone(),
	))
}

func luaMethodsZone() map[string]lua2.LGFunction {
	return luaMethodsExtend(map[string]lua2.LGFunction{
		"name": luaGenericGetSetString[Zone](func(v Zone) *string { return &v.Name }),
		"id":   luaGenericGetSetNumber[Zone, uint32](func(v Zone) *uint32 { return &v.ID }),
		"entities": func(l *lua2.LState) int {
			obj := lua.CheckReferenceValue[Zone](l, 1)
			res0 := obj.Entities()
			ud := l.NewUserData()
			ud.Value = res0
			l.SetMetatable(ud, l.GetTypeMetatable("[]DRObject"))
			l.Push(ud)

			return 1
		},
		"players": func(l *lua2.LState) int {
			obj := lua.CheckReferenceValue[Zone](l, 1)
			res0 := obj.Players()
			ud := l.NewUserData()
			ud.Value = res0
			l.SetMetatable(ud, l.GetTypeMetatable("[]*RRPlayer"))
			l.Push(ud)

			return 1
		},
		"removePlayer": func(l *lua2.LState) int {
			obj := lua.CheckReferenceValue[Zone](l, 1)
			obj.RemovePlayer(int(l.CheckNumber(1)))

			return 0
		},
		"addEntity": func(l *lua2.LState) int {
			obj := lua.CheckReferenceValue[Zone](l, 1)
			obj.AddEntity(func(v uint16) *uint16 { return &v }(uint16(l.CheckNumber(1))),
				lua.CheckValue[DRObject](l, 2),
			)

			return 0
		},
		"addPlayer": func(l *lua2.LState) int {
			obj := lua.CheckReferenceValue[Zone](l, 1)
			obj.AddPlayer(
				lua.CheckReferenceValue[RRPlayer](l, 1),
			)

			return 0
		},
		"spawn": func(l *lua2.LState) int {
			obj := lua.CheckReferenceValue[Zone](l, 1)
			obj.Spawn(
				lua.CheckValue[DRObject](l, 1),
			)

			return 0
		},
		"sendToAll": func(l *lua2.LState) int {
			obj := lua.CheckReferenceValue[Zone](l, 1)
			obj.SendToAll(
				lua.CheckReferenceValue[byter.Byter](l, 1),
			)

			return 0
		},
		"spawnInit": func(l *lua2.LState) int {
			obj := lua.CheckReferenceValue[Zone](l, 1)
			obj.SpawnInit(
				lua.CheckValue[DRObject](l, 1),
				lua.CheckReferenceValue[datatypes.Vector3Float32](l, 2), func(v float32) *float32 { return &v }(float32(l.CheckNumber(3))),
			)

			return 0
		},
		"init": func(l *lua2.LState) int {
			obj := lua.CheckReferenceValue[Zone](l, 1)
			obj.Init()

			return 0
		},
		"clearEntities": func(l *lua2.LState) int {
			obj := lua.CheckReferenceValue[Zone](l, 1)
			obj.ClearEntities()

			return 0
		},
		"reloadPathMap": func(l *lua2.LState) int {
			obj := lua.CheckReferenceValue[Zone](l, 1)
			obj.ReloadPathMap()

			return 0
		},
		"tick": func(l *lua2.LState) int {
			obj := lua.CheckReferenceValue[Zone](l, 1)
			obj.Tick()

			return 0
		},
		"findEntityByID": func(l *lua2.LState) int {
			obj := lua.CheckReferenceValue[Zone](l, 1)
			res0 := obj.FindEntityByID(uint16(l.CheckNumber(1)))
			ud := l.NewUserData()
			ud.Value = res0
			l.SetMetatable(ud, l.GetTypeMetatable("DRObject"))
			l.Push(ud)

			return 1
		},
		"giveID": func(l *lua2.LState) int {
			obj := lua.CheckReferenceValue[Zone](l, 1)
			obj.GiveID(
				lua.CheckValue[DRObject](l, 1),
			)

			return 0
		},
	})
}
func newLuaZone(l *lua2.LState) int {
	obj := NewZone(string(l.CheckString(1)), uint32(l.CheckNumber(2)))
	ud := l.NewUserData()
	ud.Value = obj

	l.SetMetatable(ud, l.GetTypeMetatable("Zone"))
	l.Push(ud)
	return 1
}

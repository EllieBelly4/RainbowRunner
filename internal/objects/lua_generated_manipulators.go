// Code generated by scripts/generatelua DO NOT EDIT.
package objects

import (
	lua "RainbowRunner/internal/lua"
	"RainbowRunner/internal/types"
	"RainbowRunner/internal/types/drobjecttypes"
	"RainbowRunner/pkg/byter"
	lua2 "github.com/yuin/gopher-lua"
)

type IManipulators interface {
	GetManipulators() *Manipulators
}

func (m *Manipulators) GetManipulators() *Manipulators {
	return m
}

func registerLuaManipulators(state *lua2.LState) {
	// Ensure the import is referenced in code
	_ = lua.LuaScript{}

	mt := state.NewTypeMetatable("Manipulators")
	state.SetGlobal("Manipulators", mt)
	state.SetField(mt, "new", state.NewFunction(newLuaManipulators))
	state.SetField(mt, "__index", state.SetFuncs(state.NewTable(),
		luaMethodsManipulators(),
	))
}

func luaMethodsManipulators() map[string]lua2.LGFunction {
	return lua.LuaMethodsExtend(map[string]lua2.LGFunction{

		"writeInit": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IManipulators](l, 1)
			obj := objInterface.GetManipulators()
			obj.WriteInit(
				lua.CheckReferenceValue[byter.Byter](l, 2),
			)

			return 0
		},

		"removeChildByID": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IManipulators](l, 1)
			obj := objInterface.GetManipulators()
			obj.RemoveChildByID(uint32(l.CheckNumber(2)))

			return 0
		},

		"writeRemoveItem": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IManipulators](l, 1)
			obj := objInterface.GetManipulators()
			obj.WriteRemoveItem(
				lua.CheckReferenceValue[byter.Byter](l, 2),
				lua.CheckValue[types.EquipmentSlot](l, 3),
			)

			return 0
		},

		"writeAddItem": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IManipulators](l, 1)
			obj := objInterface.GetManipulators()
			obj.WriteAddItem(
				lua.CheckReferenceValue[byter.Byter](l, 2),
				lua.CheckValue[drobjecttypes.DRObject](l, 3),
			)

			return 0
		},

		"addChildAndUpdate": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IManipulators](l, 1)
			obj := objInterface.GetManipulators()
			obj.AddChildAndUpdate(
				lua.CheckValue[drobjecttypes.DRObject](l, 2),
			)

			return 0
		},

		"removeChildAndUpdate": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IManipulators](l, 1)
			obj := objInterface.GetManipulators()
			obj.RemoveChildAndUpdate(
				lua.CheckValue[drobjecttypes.DRObject](l, 2),
			)

			return 0
		},

		"getManipulators": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IManipulators](l, 1)
			obj := objInterface.GetManipulators()
			res0 := obj.GetManipulators()
			if res0 != nil {
				l.Push(res0.ToLua(l))
			} else {
				l.Push(lua2.LNil)
			}

			return 1
		},
	}, luaMethodsComponent)
}
func newLuaManipulators(l *lua2.LState) int {
	obj := NewManipulators(string(l.CheckString(1)))
	ud := l.NewUserData()
	ud.Value = obj

	l.SetMetatable(ud, l.GetTypeMetatable("Manipulators"))
	l.Push(ud)
	return 1
}

func (m *Manipulators) ToLua(l *lua2.LState) lua2.LValue {
	ud := l.NewUserData()
	ud.Value = m

	l.SetMetatable(ud, l.GetTypeMetatable("Manipulators"))
	return ud
}

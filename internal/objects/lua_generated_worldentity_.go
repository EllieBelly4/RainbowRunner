package objects

/**
 * This file is generated by scripts/generatelua/generatelua.go
 * DO NOT EDIT
 */

import (
	lua "RainbowRunner/internal/lua"
	"RainbowRunner/pkg/byter"
	"RainbowRunner/pkg/datatypes"
	lua2 "github.com/yuin/gopher-lua"
)

func registerLuaWorldEntity(state *lua2.LState) {
	// Ensure the import is referenced in code
	_ = lua.LuaScript{}

	mt := state.NewTypeMetatable("WorldEntity")
	state.SetGlobal("WorldEntity", mt)
	state.SetField(mt, "new", state.NewFunction(newLuaWorldEntity))
	state.SetField(mt, "__index", state.SetFuncs(state.NewTable(),
		luaMethodsWorldEntity(),
	))
}

func luaMethodsWorldEntity() map[string]lua2.LGFunction {
	return luaMethodsExtend(map[string]lua2.LGFunction{
		"rotation":         luaGenericGetSetNumber[WorldEntity, float32](func(v WorldEntity) *float32 { return &v.Rotation }),
		"worldEntityFlags": luaGenericGetSetNumber[WorldEntity, uint32](func(v WorldEntity) *uint32 { return &v.WorldEntityFlags }),
		"label":            luaGenericGetSetString[WorldEntity](func(v WorldEntity) *string { return &v.Label }),
		"unk1Case":         luaGenericGetSetNumber[WorldEntity, uint16](func(v WorldEntity) *uint16 { return &v.Unk1Case }),
		"unk4Case":         luaGenericGetSetNumber[WorldEntity, uint32](func(v WorldEntity) *uint32 { return &v.Unk4Case }),
		"unk8Case":         luaGenericGetSetNumber[WorldEntity, uint32](func(v WorldEntity) *uint32 { return &v.Unk8Case }),
		"getWorldEntity": func(l *lua2.LState) int {
			obj := lua.CheckReferenceValue[WorldEntity](l, 1)
			res0 := obj.GetWorldEntity()
			ud := l.NewUserData()
			ud.Value = res0
			l.SetMetatable(ud, l.GetTypeMetatable("WorldEntity"))
			l.Push(ud)

			return 1
		},
		"setPosition": func(l *lua2.LState) int {
			obj := lua.CheckReferenceValue[WorldEntity](l, 1)
			obj.SetPosition(
				lua.CheckValue[datatypes.Vector3Float32](l, 2),
			)

			return 0
		},
		"setRotation": func(l *lua2.LState) int {
			obj := lua.CheckReferenceValue[WorldEntity](l, 1)
			obj.SetRotation(float32(l.CheckNumber(2)))

			return 0
		},
		"type": func(l *lua2.LState) int {
			obj := lua.CheckReferenceValue[WorldEntity](l, 1)
			res0 := obj.Type()
			ud := l.NewUserData()
			ud.Value = res0
			l.SetMetatable(ud, l.GetTypeMetatable("DRObjectType"))
			l.Push(ud)

			return 1
		},
		"writeInit": func(l *lua2.LState) int {
			obj := lua.CheckReferenceValue[WorldEntity](l, 1)
			obj.WriteInit(
				lua.CheckReferenceValue[byter.Byter](l, 2),
			)

			return 0
		},
		"toLua": func(l *lua2.LState) int {
			obj := lua.CheckReferenceValue[WorldEntity](l, 1)
			res0 := obj.ToLua(
				lua.CheckReferenceValue[lua2.LState](l, 2),
			)
			ud := l.NewUserData()
			ud.Value = res0
			l.SetMetatable(ud, l.GetTypeMetatable("lua2.LValue"))
			l.Push(ud)

			return 1
		},
		"GCObject": func(l *lua2.LState) int {
			obj := lua.CheckReferenceValue[WorldEntity](l, 1)
			l.Push(obj.GCObject.ToLua(l))
			return 1
		},
	})
}
func newLuaWorldEntity(l *lua2.LState) int {
	obj := NewWorldEntity(string(l.CheckString(1)))
	ud := l.NewUserData()
	ud.Value = obj

	l.SetMetatable(ud, l.GetTypeMetatable("WorldEntity"))
	l.Push(ud)
	return 1
}

func (w *WorldEntity) ToLua(l *lua2.LState) lua2.LValue {
	ud := l.NewUserData()
	ud.Value = w

	l.SetMetatable(ud, l.GetTypeMetatable("WorldEntity"))
	return ud
}

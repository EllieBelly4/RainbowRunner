package objects

/**
 * This file is generated by scripts/generatelua/generatelua.go
 * DO NOT EDIT
 */

import (
	lua "RainbowRunner/internal/lua"
	"RainbowRunner/pkg/byter"
	lua2 "github.com/yuin/gopher-lua"
)

type IContainer interface {
	GetContainer() *Container
}

func (c *Container) GetContainer() *Container {
	return c
}

func registerLuaContainer(state *lua2.LState) {
	// Ensure the import is referenced in code
	_ = lua.LuaScript{}

	mt := state.NewTypeMetatable("Container")
	state.SetGlobal("Container", mt)
	state.SetField(mt, "new", state.NewFunction(newLuaContainer))
	state.SetField(mt, "__index", state.SetFuncs(state.NewTable(),
		luaMethodsContainer(),
	))
}

func luaMethodsContainer() map[string]lua2.LGFunction {
	return luaMethodsExtend(map[string]lua2.LGFunction{
		"writeInit": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IContainer](l, 1)
			obj := objInterface.GetContainer()
			obj.WriteInit(
				lua.CheckReferenceValue[byter.Byter](l, 2),
			)

			return 0
		},
		"getContainer": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IContainer](l, 1)
			obj := objInterface.GetContainer()
			res0 := obj.GetContainer()
			ud := l.NewUserData()
			ud.Value = res0
			l.SetMetatable(ud, l.GetTypeMetatable("Container"))
			l.Push(ud)

			return 1
		},
	}, luaMethodsComponent)
}
func newLuaContainer(l *lua2.LState) int {
	obj := NewContainer(string(l.CheckString(1)), string(l.CheckString(2)))
	ud := l.NewUserData()
	ud.Value = obj

	l.SetMetatable(ud, l.GetTypeMetatable("Container"))
	l.Push(ud)
	return 1
}

func (c *Container) ToLua(l *lua2.LState) lua2.LValue {
	ud := l.NewUserData()
	ud.Value = c

	l.SetMetatable(ud, l.GetTypeMetatable("Container"))
	return ud
}

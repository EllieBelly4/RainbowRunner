// Code generated by scripts/generatelua DO NOT EDIT.
package objects

import (
	lua "RainbowRunner/internal/lua"
	"RainbowRunner/internal/types/configtypes"
	lua2 "github.com/yuin/gopher-lua"
)

type IWaypoint interface {
	GetWaypoint() *Waypoint
}

func (w *Waypoint) GetWaypoint() *Waypoint {
	return w
}

func registerLuaWaypoint(state *lua2.LState) {
	// Ensure the import is referenced in code
	_ = lua.LuaScript{}

	mt := state.NewTypeMetatable("Waypoint")
	state.SetGlobal("Waypoint", mt)
	state.SetField(mt, "new", state.NewFunction(newLuaWaypoint))
	state.SetField(mt, "__index", state.SetFuncs(state.NewTable(),
		luaMethodsWaypoint(),
	))
}

func luaMethodsWaypoint() map[string]lua2.LGFunction {
	return lua.LuaMethodsExtend(map[string]lua2.LGFunction{
		"baseConfig": lua.LuaGenericGetSetValue[IWaypoint, *configtypes.WaypointConfig](func(v IWaypoint) **configtypes.WaypointConfig { return &v.GetWaypoint().BaseConfig }),

		"getWaypoint": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IWaypoint](l, 1)
			obj := objInterface.GetWaypoint()
			res0 := obj.GetWaypoint()
			if res0 != nil {
				l.Push(res0.ToLua(l))
			} else {
				l.Push(lua2.LNil)
			}

			return 1
		},
	}, luaMethodsWorldEntity)
}
func newLuaWaypoint(l *lua2.LState) int {
	obj := NewWaypoint(string(l.CheckString(1)))
	ud := l.NewUserData()
	ud.Value = obj

	l.SetMetatable(ud, l.GetTypeMetatable("Waypoint"))
	l.Push(ud)
	return 1
}

func (w *Waypoint) ToLua(l *lua2.LState) lua2.LValue {
	ud := l.NewUserData()
	ud.Value = w

	l.SetMetatable(ud, l.GetTypeMetatable("Waypoint"))
	return ud
}

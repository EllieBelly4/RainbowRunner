// Code generated by scripts/generatelua DO NOT EDIT.
package objects

import (
	lua "RainbowRunner/internal/lua"
	"RainbowRunner/internal/types/drobjecttypes"
	"RainbowRunner/pkg/byter"
	lua2 "github.com/yuin/gopher-lua"
)

type IInventory interface {
	GetInventory() *Inventory
}

func (i *Inventory) GetInventory() *Inventory {
	return i
}

func registerLuaInventory(state *lua2.LState) {
	// Ensure the import is referenced in code
	_ = lua.LuaScript{}

	mt := state.NewTypeMetatable("Inventory")
	state.SetGlobal("Inventory", mt)
	state.SetField(mt, "new", state.NewFunction(newLuaInventory))
	state.SetField(mt, "__index", state.SetFuncs(state.NewTable(),
		luaMethodsInventory(),
	))
}

func luaMethodsInventory() map[string]lua2.LGFunction {
	return lua.LuaMethodsExtend(map[string]lua2.LGFunction{

		"inventoryID": lua.LuaGenericGetSetValueAny[IInventory](func(v IInventory) *byte { return &v.GetInventory().InventoryID }),

		"addChild": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IInventory](l, 1)
			obj := objInterface.GetInventory()
			obj.AddItem(
				lua.CheckValue[drobjecttypes.DRObject](l, 2),
			)

			return 0
		},

		"writeInit": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IInventory](l, 1)
			obj := objInterface.GetInventory()
			obj.WriteInit(
				lua.CheckReferenceValue[byter.Byter](l, 2),
			)

			return 0
		},

		"writeInitData": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IInventory](l, 1)
			obj := objInterface.GetInventory()
			obj.WriteInitData(
				lua.CheckReferenceValue[byter.Byter](l, 2),
			)

			return 0
		},

		"removeItemByIndex": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IInventory](l, 1)
			obj := objInterface.GetInventory()
			res0 := obj.RemoveItemByIndex(int(l.CheckNumber(2)))
			if res0 != nil {
				l.Push(res0.ToLua(l))
			} else {
				l.Push(lua2.LNil)
			}

			return 1
		},

		"getInventory": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IInventory](l, 1)
			obj := objInterface.GetInventory()
			res0 := obj.GetInventory()
			if res0 != nil {
				l.Push(res0.ToLua(l))
			} else {
				l.Push(lua2.LNil)
			}

			return 1
		},
	}, luaMethodsGCObject)
}
func newLuaInventory(l *lua2.LState) int {
	obj := NewInventory(string(l.CheckString(1)), byte(l.CheckNumber(2)))
	ud := l.NewUserData()
	ud.Value = obj

	l.SetMetatable(ud, l.GetTypeMetatable("Inventory"))
	l.Push(ud)
	return 1
}

func (i *Inventory) ToLua(l *lua2.LState) lua2.LValue {
	ud := l.NewUserData()
	ud.Value = i

	l.SetMetatable(ud, l.GetTypeMetatable("Inventory"))
	return ud
}

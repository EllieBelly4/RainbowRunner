// Code generated by scripts/generatelua DO NOT EDIT.
package objects

import (
	lua "RainbowRunner/internal/lua"
	"RainbowRunner/pkg/byter"
	lua2 "github.com/yuin/gopher-lua"
)

type IQuestManager interface {
	GetQuestManager() *QuestManager
}

func (q *QuestManager) GetQuestManager() *QuestManager {
	return q
}

func registerLuaQuestManager(state *lua2.LState) {
	// Ensure the import is referenced in code
	_ = lua.LuaScript{}

	mt := state.NewTypeMetatable("QuestManager")
	state.SetGlobal("QuestManager", mt)
	state.SetField(mt, "new", state.NewFunction(newLuaQuestManager))
	state.SetField(mt, "__index", state.SetFuncs(state.NewTable(),
		luaMethodsQuestManager(),
	))
}

func luaMethodsQuestManager() map[string]lua2.LGFunction {
	return lua.LuaMethodsExtend(map[string]lua2.LGFunction{

		"type": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IQuestManager](l, 1)
			obj := objInterface.GetQuestManager()
			res0 := obj.Type()
			ud := l.NewUserData()
			ud.Value = res0
			l.SetMetatable(ud, l.GetTypeMetatable("drobjecttypes.DRObjectType"))
			l.Push(ud)

			return 1
		},

		"writeInit": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IQuestManager](l, 1)
			obj := objInterface.GetQuestManager()
			obj.WriteInit(
				lua.CheckReferenceValue[byter.Byter](l, 2),
			)

			return 0
		},

		"writeUpdate": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IQuestManager](l, 1)
			obj := objInterface.GetQuestManager()
			obj.WriteUpdate(
				lua.CheckReferenceValue[byter.Byter](l, 2),
			)

			return 0
		},
	}, luaMethodsGCObject)
}
func newLuaQuestManager(l *lua2.LState) int {
	obj := NewQuestManager()
	ud := l.NewUserData()
	ud.Value = obj

	l.SetMetatable(ud, l.GetTypeMetatable("QuestManager"))
	l.Push(ud)
	return 1
}

func (q *QuestManager) ToLua(l *lua2.LState) lua2.LValue {
	ud := l.NewUserData()
	ud.Value = q

	l.SetMetatable(ud, l.GetTypeMetatable("QuestManager"))
	return ud
}

package objects

/**
 * This file is generated by scripts/generatelua/generatelua.go
 * DO NOT EDIT
 */

import (
	lua "RainbowRunner/internal/lua"
	"RainbowRunner/pkg/byter"
	"RainbowRunner/pkg/datatypes"
	lua2 "github.com/yuin/gopher-lua"
)

func registerLuaItem(state *lua2.LState) {
	// Ensure the import is referenced in code
	_ = lua.LuaScript{}

	mt := state.NewTypeMetatable("Item")
	state.SetGlobal("Item", mt)
	state.SetField(mt, "new", state.NewFunction(newLuaItem))
	state.SetField(mt, "__index", state.SetFuncs(state.NewTable(),
		luaMethodsItem(),
	))
}

func luaMethodsItem() map[string]lua2.LGFunction {
	return luaMethodsExtend(map[string]lua2.LGFunction{
		"modCount": luaGenericGetSetNumber[Item, int](func(v Item) *int { return &v.ModCount }),
		"mod":      luaGenericGetSetString[Item](func(v Item) *string { return &v.Mod }),
		"index":    luaGenericGetSetNumber[Item, int](func(v Item) *int { return &v.Index }),
		"setInventoryPosition": func(l *lua2.LState) int {
			obj := lua.CheckReferenceValue[Item](l, 1)
			obj.SetInventoryPosition(
				lua.CheckValue[datatypes.Vector2](l, 1),
			)

			return 0
		},
		"writeInit": func(l *lua2.LState) int {
			obj := lua.CheckReferenceValue[Item](l, 1)
			obj.WriteInit(
				lua.CheckReferenceValue[byter.Byter](l, 1),
			)

			return 0
		},
	}, luaMethodsGCObject)
}
func newLuaItem(l *lua2.LState) int {
	obj := NewItem(string(l.CheckString(1)),
		lua.CheckValue[ItemType](l, 2),
	)
	ud := l.NewUserData()
	ud.Value = obj

	l.SetMetatable(ud, l.GetTypeMetatable("Item"))
	l.Push(ud)
	return 1
}

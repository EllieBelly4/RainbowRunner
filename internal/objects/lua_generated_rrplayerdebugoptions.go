// Code generated by scripts/generatelua DO NOT EDIT.
package objects

import (
	lua "RainbowRunner/internal/lua"
	lua2 "github.com/yuin/gopher-lua"
)

type IRRPlayerDebugOptions interface {
	GetRRPlayerDebugOptions() *RRPlayerDebugOptions
}

func (r *RRPlayerDebugOptions) GetRRPlayerDebugOptions() *RRPlayerDebugOptions {
	return r
}

func registerLuaRRPlayerDebugOptions(state *lua2.LState) {
	// Ensure the import is referenced in code
	_ = lua.LuaScript{}

	mt := state.NewTypeMetatable("RRPlayerDebugOptions")
	state.SetGlobal("RRPlayerDebugOptions", mt)
	state.SetField(mt, "__index", state.SetFuncs(state.NewTable(),
		luaMethodsRRPlayerDebugOptions(),
	))
}

func luaMethodsRRPlayerDebugOptions() map[string]lua2.LGFunction {
	return lua.LuaMethodsExtend(map[string]lua2.LGFunction{
		"sendMovementMessages": lua.LuaGenericGetSetBool[IRRPlayerDebugOptions](func(v IRRPlayerDebugOptions) *bool { return &v.GetRRPlayerDebugOptions().SendMovementMessages }),

		"getRRPlayerDebugOptions": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IRRPlayerDebugOptions](l, 1)
			obj := objInterface.GetRRPlayerDebugOptions()
			res0 := obj.GetRRPlayerDebugOptions()
			if res0 != nil {
				l.Push(res0.ToLua(l))
			} else {
				l.Push(lua2.LNil)
			}

			return 1
		},
	})
}

func (r *RRPlayerDebugOptions) ToLua(l *lua2.LState) lua2.LValue {
	ud := l.NewUserData()
	ud.Value = r

	l.SetMetatable(ud, l.GetTypeMetatable("RRPlayerDebugOptions"))
	return ud
}

// Code generated by scripts/generatelua DO NOT EDIT.
package objects

import (
	lua "RainbowRunner/internal/lua"
	lua2 "github.com/yuin/gopher-lua"
)

type IManipulator interface {
	GetManipulator() *Manipulator
}

func (m *Manipulator) GetManipulator() *Manipulator {
	return m
}

func registerLuaManipulator(state *lua2.LState) {
	// Ensure the import is referenced in code
	_ = lua.LuaScript{}

	mt := state.NewTypeMetatable("Manipulator")
	state.SetGlobal("Manipulator", mt)
	state.SetField(mt, "new", state.NewFunction(newLuaManipulator))
	state.SetField(mt, "__index", state.SetFuncs(state.NewTable(),
		luaMethodsManipulator(),
	))
}

func luaMethodsManipulator() map[string]lua2.LGFunction {
	return lua.LuaMethodsExtend(map[string]lua2.LGFunction{
		"slot": lua.LuaGenericGetSetNumber[IManipulator](func(v IManipulator) *int { return &v.GetManipulator().Slot }),

		"getManipulator": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IManipulator](l, 1)
			obj := objInterface.GetManipulator()
			res0 := obj.GetManipulator()
			if res0 != nil {
				l.Push(res0.ToLua(l))
			} else {
				l.Push(lua2.LNil)
			}

			return 1
		},
	}, luaMethodsComponent)
}
func newLuaManipulator(l *lua2.LState) int {
	obj := NewManipulator(string(l.CheckString(1)), string(l.CheckString(2)))
	ud := l.NewUserData()
	ud.Value = obj

	l.SetMetatable(ud, l.GetTypeMetatable("Manipulator"))
	l.Push(ud)
	return 1
}

func (m *Manipulator) ToLua(l *lua2.LState) lua2.LValue {
	ud := l.NewUserData()
	ud.Value = m

	l.SetMetatable(ud, l.GetTypeMetatable("Manipulator"))
	return ud
}

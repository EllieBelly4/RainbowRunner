// Code generated by scripts/generatelua DO NOT EDIT.
package objects

import (
	lua "RainbowRunner/internal/lua"
	lua2 "github.com/yuin/gopher-lua"
)

type IRREntityProperties interface {
	GetRREntityProperties() *RREntityProperties
}

func (r *RREntityProperties) GetRREntityProperties() *RREntityProperties {
	return r
}

func registerLuaRREntityProperties(state *lua2.LState) {
	// Ensure the import is referenced in code
	_ = lua.LuaScript{}

	mt := state.NewTypeMetatable("RREntityProperties")
	state.SetGlobal("RREntityProperties", mt)
	state.SetField(mt, "new", state.NewFunction(newLuaRREntityProperties))
	state.SetField(mt, "__index", state.SetFuncs(state.NewTable(),
		luaMethodsRREntityProperties(),
	))
}

func luaMethodsRREntityProperties() map[string]lua2.LGFunction {
	return lua.LuaMethodsExtend(map[string]lua2.LGFunction{
		"ownerID": lua.LuaGenericGetSetNumber[IRREntityProperties](func(v IRREntityProperties) *uint16 { return &v.GetRREntityProperties().OwnerID }),
		"id":      lua.LuaGenericGetSetNumber[IRREntityProperties](func(v IRREntityProperties) *uint32 { return &v.GetRREntityProperties().ID }),
		// -------------------------------------------------------------------------------------------------------------
		// Unsupported field type Conn
		// -------------------------------------------------------------------------------------------------------------
		"zone": lua.LuaGenericGetSetValue[IRREntityProperties, *Zone](func(v IRREntityProperties) **Zone { return &v.GetRREntityProperties().Zone }),
		"getRREntityProperties": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IRREntityProperties](l, 1)
			obj := objInterface.GetRREntityProperties()
			res0 := obj.GetRREntityProperties()
			if res0 != nil {
				l.Push(res0.ToLua(l))
			} else {
				l.Push(lua2.LNil)
			}

			return 1
		},
		"setOwner": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IRREntityProperties](l, 1)
			obj := objInterface.GetRREntityProperties()
			obj.SetOwner(uint16(l.CheckNumber(2)))

			return 0
		},
	})
}
func newLuaRREntityProperties(l *lua2.LState) int {
	obj := NewRREntityProperties()
	ud := l.NewUserData()
	ud.Value = obj

	l.SetMetatable(ud, l.GetTypeMetatable("RREntityProperties"))
	l.Push(ud)
	return 1
}

func (r *RREntityProperties) ToLua(l *lua2.LState) lua2.LValue {
	ud := l.NewUserData()
	ud.Value = r

	l.SetMetatable(ud, l.GetTypeMetatable("RREntityProperties"))
	return ud
}

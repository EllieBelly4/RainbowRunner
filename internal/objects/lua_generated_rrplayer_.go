package objects

/**
 * This file is generated by scripts/generatelua/generatelua.go
 * DO NOT EDIT
 */

import (
	lua "RainbowRunner/internal/lua"
	lua2 "github.com/yuin/gopher-lua"
)

func registerLuaRRPlayer(state *lua2.LState) {
	// Ensure the import is referenced in code
	_ = lua.LuaScript{}

	mt := state.NewTypeMetatable("RRPlayer")
	state.SetGlobal("RRPlayer", mt)
	state.SetField(mt, "__index", state.SetFuncs(state.NewTable(),
		luaMethodsRRPlayer(),
	))
}

func luaMethodsRRPlayer() map[string]lua2.LGFunction {
	return luaMethodsExtend(map[string]lua2.LGFunction{
		"toLua": func(l *lua2.LState) int {
			obj := lua.CheckReferenceValue[RRPlayer](l, 1)
			res0 := obj.ToLua(
				lua.CheckReferenceValue[lua2.LState](l, 2),
			)
			ud := l.NewUserData()
			ud.Value = res0
			l.SetMetatable(ud, l.GetTypeMetatable("lua2.LValue"))
			l.Push(ud)

			return 1
		},
		"onZoneJoin": func(l *lua2.LState) int {
			obj := lua.CheckReferenceValue[RRPlayer](l, 1)
			obj.OnZoneJoin()

			return 0
		},
		"leaveZone": func(l *lua2.LState) int {
			obj := lua.CheckReferenceValue[RRPlayer](l, 1)
			obj.LeaveZone()

			return 0
		},
		"joinZone": func(l *lua2.LState) int {
			obj := lua.CheckReferenceValue[RRPlayer](l, 1)
			obj.JoinZone(
				lua.CheckReferenceValue[Zone](l, 2),
			)

			return 0
		},
	})
}

func (r *RRPlayer) ToLua(l *lua2.LState) lua2.LValue {
	ud := l.NewUserData()
	ud.Value = r

	l.SetMetatable(ud, l.GetTypeMetatable("RRPlayer"))
	return ud
}

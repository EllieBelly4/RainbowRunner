package objects

/**
 * This file is generated by scripts/generatelua/generatelua.go
 * DO NOT EDIT
 */

import (
	lua "RainbowRunner/internal/lua"
	"RainbowRunner/pkg/byter"
	lua2 "github.com/yuin/gopher-lua"
)

type IPlayer interface {
	GetPlayer() *Player
}

func (p *Player) GetPlayer() *Player {
	return p
}

func registerLuaPlayer(state *lua2.LState) {
	// Ensure the import is referenced in code
	_ = lua.LuaScript{}

	mt := state.NewTypeMetatable("Player")
	state.SetGlobal("Player", mt)
	state.SetField(mt, "new", state.NewFunction(newLuaPlayer))
	state.SetField(mt, "__index", state.SetFuncs(state.NewTable(),
		luaMethodsPlayer(),
	))
}

func luaMethodsPlayer() map[string]lua2.LGFunction {
	return luaMethodsExtend(map[string]lua2.LGFunction{
		"name":      luaGenericGetSetString[IPlayer](func(v IPlayer) *string { return &v.GetPlayer().Name }),
		"currentHP": luaGenericGetSetNumber[IPlayer](func(v IPlayer) *uint32 { return &v.GetPlayer().CurrentHP }),
		"type": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IPlayer](l, 1)
			obj := objInterface.GetPlayer()
			res0 := obj.Type()
			ud := l.NewUserData()
			ud.Value = res0
			l.SetMetatable(ud, l.GetTypeMetatable("DRObjectType"))
			l.Push(ud)

			return 1
		},
		"writeInit": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IPlayer](l, 1)
			obj := objInterface.GetPlayer()
			obj.WriteInit(
				lua.CheckReferenceValue[byter.Byter](l, 2),
			)

			return 0
		},
		"writeUpdate": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IPlayer](l, 1)
			obj := objInterface.GetPlayer()
			obj.WriteUpdate(
				lua.CheckReferenceValue[byter.Byter](l, 2),
			)

			return 0
		},
		"writeFullGCObject": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IPlayer](l, 1)
			obj := objInterface.GetPlayer()
			obj.WriteFullGCObject(
				lua.CheckReferenceValue[byter.Byter](l, 2),
			)

			return 0
		},
		"writeSynch": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IPlayer](l, 1)
			obj := objInterface.GetPlayer()
			obj.WriteSynch(
				lua.CheckReferenceValue[byter.Byter](l, 2),
			)

			return 0
		},
		"sendCreateNewPlayerEntity": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IPlayer](l, 1)
			obj := objInterface.GetPlayer()
			obj.SendCreateNewPlayerEntity(
				lua.CheckReferenceValue[RRPlayer](l, 2),
			)

			return 0
		},
		"changeZone": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IPlayer](l, 1)
			obj := objInterface.GetPlayer()
			obj.ChangeZone(string(l.CheckString(2)))

			return 0
		},
		"getPlayer": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IPlayer](l, 1)
			obj := objInterface.GetPlayer()
			res0 := obj.GetPlayer()
			ud := l.NewUserData()
			ud.Value = res0
			l.SetMetatable(ud, l.GetTypeMetatable("Player"))
			l.Push(ud)

			return 1
		},
	}, luaMethodsGCObject)
}
func newLuaPlayer(l *lua2.LState) int {
	obj := NewPlayer(string(l.CheckString(1)))
	ud := l.NewUserData()
	ud.Value = obj

	l.SetMetatable(ud, l.GetTypeMetatable("Player"))
	l.Push(ud)
	return 1
}

func (p *Player) ToLua(l *lua2.LState) lua2.LValue {
	ud := l.NewUserData()
	ud.Value = p

	l.SetMetatable(ud, l.GetTypeMetatable("Player"))
	return ud
}

package objects

/**
 * This file is generated by scripts/generatelua/generatelua.go
 * DO NOT EDIT
 */

import (
	lua "RainbowRunner/internal/lua"
	"RainbowRunner/pkg/byter"
	lua2 "github.com/yuin/gopher-lua"
)

type IModifiers interface {
	GetModifiers() *Modifiers
}

func (m *Modifiers) GetModifiers() *Modifiers {
	return m
}

func registerLuaModifiers(state *lua2.LState) {
	// Ensure the import is referenced in code
	_ = lua.LuaScript{}

	mt := state.NewTypeMetatable("Modifiers")
	state.SetGlobal("Modifiers", mt)
	state.SetField(mt, "new", state.NewFunction(newLuaModifiers))
	state.SetField(mt, "__index", state.SetFuncs(state.NewTable(),
		luaMethodsModifiers(),
	))
}

func luaMethodsModifiers() map[string]lua2.LGFunction {
	return luaMethodsExtend(map[string]lua2.LGFunction{
		"writeInit": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IModifiers](l, 1)
			obj := objInterface.GetModifiers()
			obj.WriteInit(
				lua.CheckReferenceValue[byter.Byter](l, 2),
			)

			return 0
		},
		"getModifiers": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IModifiers](l, 1)
			obj := objInterface.GetModifiers()
			res0 := obj.GetModifiers()
			ud := l.NewUserData()
			ud.Value = res0
			l.SetMetatable(ud, l.GetTypeMetatable("Modifiers"))
			l.Push(ud)

			return 1
		},
	}, luaMethodsComponent)
}
func newLuaModifiers(l *lua2.LState) int {
	obj := NewModifiers(string(l.CheckString(1)))
	ud := l.NewUserData()
	ud.Value = obj

	l.SetMetatable(ud, l.GetTypeMetatable("Modifiers"))
	l.Push(ud)
	return 1
}

func (m *Modifiers) ToLua(l *lua2.LState) lua2.LValue {
	ud := l.NewUserData()
	ud.Value = m

	l.SetMetatable(ud, l.GetTypeMetatable("Modifiers"))
	return ud
}

// Code generated by scripts/generatelua DO NOT EDIT.
package objects

import (
	lua "RainbowRunner/internal/lua"
	"RainbowRunner/pkg/byter"
	lua2 "github.com/yuin/gopher-lua"
)

type IAvatarMetrics interface {
	GetAvatarMetrics() *AvatarMetrics
}

func (a *AvatarMetrics) GetAvatarMetrics() *AvatarMetrics {
	return a
}

func registerLuaAvatarMetrics(state *lua2.LState) {
	// Ensure the import is referenced in code
	_ = lua.LuaScript{}

	mt := state.NewTypeMetatable("AvatarMetrics")
	state.SetGlobal("AvatarMetrics", mt)
	state.SetField(mt, "new", state.NewFunction(newLuaAvatarMetrics))
	state.SetField(mt, "__index", state.SetFuncs(state.NewTable(),
		luaMethodsAvatarMetrics(),
	))
}

func luaMethodsAvatarMetrics() map[string]lua2.LGFunction {
	return lua.LuaMethodsExtend(map[string]lua2.LGFunction{
		"writeFullGCObject": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IAvatarMetrics](l, 1)
			obj := objInterface.GetAvatarMetrics()
			obj.WriteFullGCObject(
				lua.CheckReferenceValue[byter.Byter](l, 2),
			)

			return 0
		},
		"getAvatarMetrics": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IAvatarMetrics](l, 1)
			obj := objInterface.GetAvatarMetrics()
			res0 := obj.GetAvatarMetrics()
			if res0 != nil {
				l.Push(res0.ToLua(l))
			} else {
				l.Push(lua2.LNil)
			}

			return 1
		},
	}, luaMethodsComponent)
}
func newLuaAvatarMetrics(l *lua2.LState) int {
	obj := NewAvatarMetrics(uint32(l.CheckNumber(1)), string(l.CheckString(2)))
	ud := l.NewUserData()
	ud.Value = obj

	l.SetMetatable(ud, l.GetTypeMetatable("AvatarMetrics"))
	l.Push(ud)
	return 1
}

func (a *AvatarMetrics) ToLua(l *lua2.LState) lua2.LValue {
	ud := l.NewUserData()
	ud.Value = a

	l.SetMetatable(ud, l.GetTypeMetatable("AvatarMetrics"))
	return ud
}

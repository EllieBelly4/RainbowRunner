// Code generated by scripts/generatelua DO NOT EDIT.
package configtypes

import (
	lua "RainbowRunner/internal/lua"
	lua2 "github.com/yuin/gopher-lua"
)

type IWaypointConfig interface {
	GetWaypointConfig() *WaypointConfig
}

func (w *WaypointConfig) GetWaypointConfig() *WaypointConfig {
	return w
}

func registerLuaWaypointConfig(state *lua2.LState) {
	// Ensure the import is referenced in code
	_ = lua.LuaScript{}

	mt := state.NewTypeMetatable("WaypointConfig")
	state.SetGlobal("WaypointConfig", mt)
	state.SetField(mt, "new", state.NewFunction(newLuaWaypointConfig))
	state.SetField(mt, "__index", state.SetFuncs(state.NewTable(),
		luaMethodsWaypointConfig(),
	))
}

func luaMethodsWaypointConfig() map[string]lua2.LGFunction {
	return lua.LuaMethodsExtend(map[string]lua2.LGFunction{

		"getWaypointConfig": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[IWaypointConfig](l, 1)
			obj := objInterface.GetWaypointConfig()
			res0 := obj.GetWaypointConfig()
			if res0 != nil {
				l.Push(res0.ToLua(l))
			} else {
				l.Push(lua2.LNil)
			}

			return 1
		},
	}, luaMethodsEntityConfig)
}
func newLuaWaypointConfig(l *lua2.LState) int {
	obj := NewWaypointConfig()
	ud := l.NewUserData()
	ud.Value = obj

	l.SetMetatable(ud, l.GetTypeMetatable("WaypointConfig"))
	l.Push(ud)
	return 1
}

func (w *WaypointConfig) ToLua(l *lua2.LState) lua2.LValue {
	ud := l.NewUserData()
	ud.Value = w

	l.SetMetatable(ud, l.GetTypeMetatable("WaypointConfig"))
	return ud
}

// Code generated by scripts/generatelua DO NOT EDIT.
package configtypes

import (
	lua "RainbowRunner/internal/lua"
	lua2 "github.com/yuin/gopher-lua"
)

type ICheckpointEntityConfig interface {
	GetCheckpointEntityConfig() *CheckpointEntityConfig
}

func (c *CheckpointEntityConfig) GetCheckpointEntityConfig() *CheckpointEntityConfig {
	return c
}

func registerLuaCheckpointEntityConfig(state *lua2.LState) {
	// Ensure the import is referenced in code
	_ = lua.LuaScript{}

	mt := state.NewTypeMetatable("CheckpointEntityConfig")
	state.SetGlobal("CheckpointEntityConfig", mt)
	state.SetField(mt, "new", state.NewFunction(newLuaCheckpointEntityConfig))
	state.SetField(mt, "__index", state.SetFuncs(state.NewTable(),
		luaMethodsCheckpointEntityConfig(),
	))
}

func luaMethodsCheckpointEntityConfig() map[string]lua2.LGFunction {
	return lua.LuaMethodsExtend(map[string]lua2.LGFunction{

		"getCheckpointEntityConfig": func(l *lua2.LState) int {
			objInterface := lua.CheckInterfaceValue[ICheckpointEntityConfig](l, 1)
			obj := objInterface.GetCheckpointEntityConfig()
			res0 := obj.GetCheckpointEntityConfig()
			if res0 != nil {
				l.Push(res0.ToLua(l))
			} else {
				l.Push(lua2.LNil)
			}

			return 1
		},
	}, luaMethodsEntityConfig)
}
func newLuaCheckpointEntityConfig(l *lua2.LState) int {
	obj := NewCheckpointEntityConfig()
	ud := l.NewUserData()
	ud.Value = obj

	l.SetMetatable(ud, l.GetTypeMetatable("CheckpointEntityConfig"))
	l.Push(ud)
	return 1
}

func (c *CheckpointEntityConfig) ToLua(l *lua2.LState) lua2.LValue {
	ud := l.NewUserData()
	ud.Value = c

	l.SetMetatable(ud, l.GetTypeMetatable("CheckpointEntityConfig"))
	return ud
}
